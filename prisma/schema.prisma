// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String  @unique
  email     String  @unique
  firstName String?
  lastName  String?
  clerkid   String  @unique // Auth system reference
  image     String? // Avatar / profile picture
  bio       String? // Optional user bio
  location  String? // Optional for locality-based trades

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  closet                Closet?           @relation() // Changed from closets to singular closet
  favorites             Favorite[]        @relation("UserFavorites")
  messagesTo            Message[]         @relation("MessageTo")
  messagesFrom          Message[]         @relation("MessageFrom")
  tradeRequestsSent     TradeRequest[]    @relation("TradeFrom")
  tradeRequestsReceived TradeRequest[]    @relation("TradeTo")
  listings              Listing[]
  TradePreference       TradePreference[]
}

model Closet {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @default("My Closet")
  userId    String    @unique @db.Uuid // Add @unique to ensure one-to-one relationship
  user      User      @relation(fields: [userId], references: [id])
  listings  Listing[]
  createdAt DateTime  @default(now())
}

model Listing {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String
  imageUrls   String[]
  isPrivate   Boolean  @default(false)
  order       Int      @default(0) // For drag-and-drop ordering in closet

  userId String @db.Uuid // Ensure this matches the User model's id type
  user   User   @relation(fields: [userId], references: [id])

  closetId String @db.Uuid // Ensure this matches the Closet model's id type
  closet   Closet @relation(fields: [closetId], references: [id])

  tags                   Tag[]             @relation("ListingTags")
  favorites              Favorite[]        @relation("ListingFavorites")
  messages               Message[]
  tradePreferences       TradePreference[]
  tradeRequestsInitiated TradeRequest[]    @relation("InitiatorListings")
  tradeRequestsReceived  TradeRequest[]    @relation("TargetListings")

  status    ListingStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model TradePreference {
  id        String  @id @default(cuid())
  listingId String  @db.Uuid // Ensure this matches the Listing model's id type
  listing   Listing @relation(fields: [listingId], references: [id])

  // NEW: tie back to user
  userId String @db.Uuid // Ensure this matches the User model's id type
  user   User   @relation(fields: [userId], references: [id])

  title     String
  imageUrl  String
  notes     String?
  createdAt DateTime @default(now())
}

model TradeRequest {
  id         String      @id @default(cuid())
  fromUserId String      @db.Uuid // Ensure this matches the User model's id type
  toUserId   String      @db.Uuid // Ensure this matches the User model's id type
  status     TradeStatus @default(PENDING)
  message    String?
  createdAt  DateTime    @default(now())

  updatedAt DateTime @updatedAt

  fromUser          User      @relation("TradeFrom", fields: [fromUserId], references: [id])
  toUser            User      @relation("TradeTo", fields: [toUserId], references: [id])
  initiatorListings Listing[] @relation("InitiatorListings")
  targetListings    Listing[] @relation("TargetListings")
}

enum TradeStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

enum ListingStatus {
  ACTIVE
  SOLD
  ARCHIVED
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  listings Listing[] @relation("ListingTags")
}

model Favorite {
  id        String  @id @default(cuid())
  userId    String  @db.Uuid // Ensure this matches the User model's id type
  listingId String  @db.Uuid // Ensure this matches the Listing model's id type
  user      User    @relation("UserFavorites", fields: [userId], references: [id])
  listing   Listing @relation("ListingFavorites", fields: [listingId], references: [id])

  @@unique([userId, listingId]) // prevent duplicates
}

model Message {
  id        String   @id @default(cuid())
  fromId    String   @db.Uuid // Ensure this matches the User model's id type
  toId      String   @db.Uuid // Ensure this matches the User model's id type
  content   String
  listingId String?  @db.Uuid // Ensure this matches the Listing model's id type
  timestamp DateTime @default(now())

  // NEW:
  updatedAt DateTime @updatedAt

  from    User     @relation("MessageFrom", fields: [fromId], references: [id])
  to      User     @relation("MessageTo", fields: [toId], references: [id])
  listing Listing? @relation(fields: [listingId], references: [id])
}
